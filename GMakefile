# Project:   CBDebugLib
include MakeROCom

# Tools
CC = gcc
LibFile = ar
# Make cannot understand rules which contain RISC OS path names such as /C:Macros.h as prerequisites, so strip them from the dynamic dependencies
StripBadPre = sed -r 's@/[A-Za-z]+:[^ ]*@@g'
Delete = delete

# Toolflags:
CCFlags = -g -c -IC: -mlibscl -mthrowback -Wall -Wextra -pedantic -std=c99 -MMD -MP -DACORN_C -DDEBUG_OUTPUT -o $@
CCModuleFlags = $(CCFlags) -mmodule
LibFileFlags = -rcs $@

# GNU Make doesn't apply suffix rules to make object files in subdirectories
# if referenced by path (even if the directory name is in UnixEnv$make$sfix)
# so use addsuffix not addprefix here
DebugObjects = $(addsuffix .o,$(ObjectList))
ModuleObjects = $(addsuffix .oz,$(ObjectList))

# Final targets:
all: @.lib$(LibName)/a @.lib$(LibName)mod/a

@.lib$(LibName)/a: $(DebugObjects)
	$(LibFile) $(LibFileFlags) $(DebugObjects)

@.lib$(LibName)mod/a: $(ModuleObjects)
	$(LibFile) $(LibFileFlags) $(ModuleObjects)

# User-editable dependencies:
# All of these suffixes must also be specified in UnixEnv$*$sfix
.SUFFIXES: .o .c .oz
.c.o:
	${CC} $(CCFlags) -MF $*T.d $<
	$(StripBadPre) < $*T.d >$*.d
	$(Delete) d.$*T
.c.oz:
	${CC} $(CCModuleFlags) -MF $*TZ.d $<
	$(StripBadPre) < $*TZ.d >$*Z.d
	$(Delete) d.$*TZ

# These files are generated during compilation to track C header #includes.
# It's not an error if they don't exist.
-include $(addsuffix .d,$(ObjectList))
-include $(addsuffix Z.d,$(ObjectList))
